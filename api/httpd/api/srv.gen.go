// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.3.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"

	"github.com/discord-gophers/goapi-gen/runtime"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
	"github.com/oklog/ulid"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all alerts
	// (GET /alerts)
	GetAlerts(w http.ResponseWriter, r *http.Request) *Response
	// Login
	// (POST /auth/login)
	AuthLogin(w http.ResponseWriter, r *http.Request) *Response
	// Logout
	// (POST /auth/logout)
	AuthLogout(w http.ResponseWriter, r *http.Request) *Response
	// Send a webpush notification key
	// (GET /notifications/webpush)
	GetWebpushKey(w http.ResponseWriter, r *http.Request) *Response
	// Send a webpush notification registration payload
	// (POST /notifications/webpush)
	RegisterWebpush(w http.ResponseWriter, r *http.Request) *Response
	// Get all sensors
	// (GET /sensors)
	GetSensors(w http.ResponseWriter, r *http.Request) *Response
	// Get live sensor data
	// (GET /sensors/live)
	GetSensorsLive(w http.ResponseWriter, r *http.Request) *Response
	// Rename a sensor
	// (POST /sensors/{id}/rename)
	RenameSensor(w http.ResponseWriter, r *http.Request, id string, params RenameSensorParams) *Response
	// Get all users
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request) *Response
	// Create a user
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request) *Response
	// Delete a user by id
	// (DELETE /users/{id})
	DeleteUserByID(w http.ResponseWriter, r *http.Request, id ulid.ULID) *Response
	// Get a user by id
	// (GET /users/{id})
	GetUserByID(w http.ResponseWriter, r *http.Request, id ulid.ULID) *Response
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	Middlewares      Middlewares
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// GetAlerts operation middleware
func (siw *ServerInterfaceWrapper) GetAlerts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"perm:alerts:read"})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetAlerts(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// AuthLogin operation middleware
func (siw *ServerInterfaceWrapper) AuthLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"perm", "perm:users:create", "perm:users:read", "perm:users:delete", "perm:alerts:read", "perm:sensors:read", "perm:sensors:update", "perm:sensors:delete", "perm:sensors:state:update"})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.AuthLogin(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	handler(w, r.WithContext(ctx))
}

// AuthLogout operation middleware
func (siw *ServerInterfaceWrapper) AuthLogout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.AuthLogout(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// GetWebpushKey operation middleware
func (siw *ServerInterfaceWrapper) GetWebpushKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetWebpushKey(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// RegisterWebpush operation middleware
func (siw *ServerInterfaceWrapper) RegisterWebpush(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.RegisterWebpush(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// GetSensors operation middleware
func (siw *ServerInterfaceWrapper) GetSensors(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"perm:sensors:read"})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetSensors(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// GetSensorsLive operation middleware
func (siw *ServerInterfaceWrapper) GetSensorsLive(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"perm:sensors:read"})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetSensorsLive(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// RenameSensor operation middleware
func (siw *ServerInterfaceWrapper) RenameSensor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id string

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"perm:sensors:update"})

	// Parameter object where we will unmarshal all parameters from the context
	var params RenameSensorParams

	// ------------- Required query parameter "name" -------------

	if err := runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name); err != nil {
		err = fmt.Errorf("invalid format for parameter name: %w", err)
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{err, "name"})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.RenameSensor(w, r, id, params)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"perm:users:read"})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetUsers(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"perm:users:create"})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.CreateUser(w, r)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// DeleteUserByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id ulid.ULID

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"perm:users:delete"})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.DeleteUserByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

// GetUserByID operation middleware
func (siw *ServerInterfaceWrapper) GetUserByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id ulid.ULID

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err, "id"})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		resp := siw.Handler.GetUserByID(w, r, id)
		if resp != nil {
			if resp.body != nil {
				render.Render(w, r, resp)
			} else {
				w.WriteHeader(resp.Code)
			}
		}
	})

	// Operation specific middleware
	handler = siw.Middlewares.Auth(handler).ServeHTTP

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter %s: %v", err.paramName, err.err)
}

func (err UnescapedCookieParamError) Unwrap() error { return err.err }

type UnmarshalingParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err UnmarshalingParamError) Error() string {
	return fmt.Sprintf("error unmarshaling parameter %s as JSON: %v", err.paramName, err.err)
}

func (err UnmarshalingParamError) Unwrap() error { return err.err }

type RequiredParamError struct {
	err       error
	paramName string
}

// Error implements error.
func (err RequiredParamError) Error() string {
	if err.err == nil {
		return fmt.Sprintf("query parameter %s is required, but not found", err.paramName)
	} else {
		return fmt.Sprintf("query parameter %s is required, but errored: %s", err.paramName, err.err)
	}
}

func (err RequiredParamError) Unwrap() error { return err.err }

type RequiredHeaderError struct {
	paramName string
}

// Error implements error.
func (err RequiredHeaderError) Error() string {
	return fmt.Sprintf("header parameter %s is required, but not found", err.paramName)
}

type InvalidParamFormatError struct {
	err       error
	paramName string
}

// Error implements error.
func (err InvalidParamFormatError) Error() string {
	return fmt.Sprintf("invalid format for parameter %s: %v", err.paramName, err.err)
}

func (err InvalidParamFormatError) Unwrap() error { return err.err }

type TooManyValuesForParamError struct {
	NumValues int
	paramName string
}

// Error implements error.
func (err TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("expected one value for %s, got %d", err.paramName, err.NumValues)
}

// ParameterName is an interface that is implemented by error types that are
// relevant to a specific parameter.
type ParameterError interface {
	error
	// ParamName is the name of the parameter that the error is referring to.
	ParamName() string
}

func (err UnescapedCookieParamError) ParamName() string  { return err.paramName }
func (err UnmarshalingParamError) ParamName() string     { return err.paramName }
func (err RequiredParamError) ParamName() string         { return err.paramName }
func (err RequiredHeaderError) ParamName() string        { return err.paramName }
func (err InvalidParamFormatError) ParamName() string    { return err.paramName }
func (err TooManyValuesForParamError) ParamName() string { return err.paramName }

// Middlewares holds the set of middleware for this service
type Middlewares struct {
	Auth func(http.Handler) http.Handler
}

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      Middlewares
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:     "/",
		BaseRouter:  chi.NewRouter(),
		Middlewares: Middlewares{},
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		Middlewares:      options.Middlewares,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	// Operation specific middleware
	if options.Middlewares.Auth == nil {
		panic("goapi-gen: could not find tagged middleware auth (Auth)")
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Get("/alerts", wrapper.GetAlerts)
		r.Post("/auth/login", wrapper.AuthLogin)
		r.Post("/auth/logout", wrapper.AuthLogout)
		r.Get("/notifications/webpush", wrapper.GetWebpushKey)
		r.Post("/notifications/webpush", wrapper.RegisterWebpush)
		r.Get("/sensors", wrapper.GetSensors)
		r.Get("/sensors/live", wrapper.GetSensorsLive)
		r.Post("/sensors/{id}/rename", wrapper.RenameSensor)
		r.Get("/users", wrapper.GetUsers)
		r.Post("/users", wrapper.CreateUser)
		r.Delete("/users/{id}", wrapper.DeleteUserByID)
		r.Get("/users/{id}", wrapper.GetUserByID)
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithAuthMiddleware(middleware func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares.Auth = middleware
	}
}

func WithMiddlewares(middlewares Middlewares) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares = middlewares
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}
