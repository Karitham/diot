openapi: "3.1.0"
servers:
  - url: /v1
info:
  description: |-
    iDIoT backend API
  version: 0.0.1
  title: iDIoT backend API
tags:
  - name: user
    description: Operations about user
  - name: auth
    description: Operations about auth
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Login
      operationId: authLogin
      requestBody:
        description: Login
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: abc@efg.xyz
                password:
                  type: string
                  example: DHBUD@&#W(IJOQDJCNE@DQFX$#D)
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                required:
                  - token
                  - expire_at
                properties:
                  token:
                    type: string
                    example: sess_dwquijlbndwqbyuidhkwqdyuibqwd89d30y12dh22389d:dh189gd2d1ghod921
                  expire_at:
                    type: string
                    format: date-time
                    example: "2021-01-01T00:00:00Z"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/logout:
    post:
      x-go-middlewares: [auth]
      security:
        - bearerAuth: []
      tags:
        - auth
      summary: Logout
      operationId: authLogout
      responses:
        "200":
          description: ok
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /notifications/webpush:
    x-go-middlewares: [auth]
    get:
      security:
        - bearerAuth: []
      tags:
        - notification
      summary: Send a webpush notification key
      operationId: getWebpushKey
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebpushKey"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      security:
        - bearerAuth: []
      tags:
        - notification
      summary: Send a webpush notification registration payload
      operationId: registerWebpush
      responses:
        "200":
          description: ok
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      requestBody:
        description: Create a new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebpushRegistration"

  /users:
    x-go-middlewares: [auth]
    post:
      security:
        - bearerAuth: [perm:users:create]
      tags:
        - user
      summary: Create a user
      operationId: createUser
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      requestBody:
        description: Create a new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
    get:
      security:
        - bearerAuth: [perm:users:read]
      tags:
        - user
      summary: Get all users
      operationId: getUsers
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{id}:
    x-go-middlewares: [auth]
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Get a user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: id of user to return
          required: true
          schema:
            type: string
            x-go-type:
              type: ULID
              import: github.com/oklog/ulid
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - user
      summary: Delete a user by id
      security:
        - bearerAuth: [perm:users:delete]
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: id of user to delete
          required: true
          schema:
            type: string
            x-go-type:
              type: ULID
              import: github.com/oklog/ulid
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sensors:
    x-go-middlewares: [auth]
    get:
      tags:
        - sensor
      security:
        - bearerAuth: [perm:sensors:read]
      summary: Get all sensors
      operationId: getSensors
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SensorInfo"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sensors/{id}/rename:
    x-go-middlewares: [auth]
    post:
      tags:
        - sensor
      security:
        - bearerAuth: [perm:sensors:update]
      summary: Rename a sensor
      operationId: renameSensor
      parameters:
        - name: id
          in: path
          description: id of sensor to rename
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: new name of sensor
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SensorInfo"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sensors/live:
    x-go-middlewares: [auth]
    get: 
      tags:
        - sensor
      security:
        - bearerAuth: [perm:sensors:read]
      summary: Get live sensor data
      description: |
        This endpoint returns live data from the sensors.
        It is a websocket endpoint, so you need to use a websocket client to connect to it.
      operationId: getSensorsLive
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SensorData"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /alerts:
    x-go-middlewares: [auth]
    get:
      tags:
        - alert
      security:
        - bearerAuth: [perm:alerts:read]
      summary: Get all alerts
      operationId: getAlerts
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AlertHistoryEntry"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      properties:
        id:
          type: string
          x-go-type:
            type: ULID
            import: github.com/oklog/ulid
        name:
          type: string
          example: hi mark
        email:
          type: string
          example: x@example.com
        permissions:
          type: array
          items:
            type: string
          example: [perm:users:read, perm:users:update]
      required:
        - id
        - name
        - email
        - permissions
    UserCreate:
      properties:
        name:
          type: string
          example: hi mark
        email:
          type: string
          example: x@example.com
        password:
          type: string
          example: DWD21378udh#g3@#d
        permissions:
          type: array
          items:
            type: string
          example: [perm:users:read, perm:users:update]
      required:
        - name
        - email
        - password
        - permissions

    Error:
      properties:
        message:
          type: string
          description: Error message
        request_id:
          type: string
          description: Request ID
      required:
        - message
    WebpushKey:
      properties:
        key:
          type: string
          description: Webpush key
      required:
        - key
    WebpushRegistration:
      properties:
        endpoint:
          type: string
          description: Webpush endpoint
        keys:
          type: object
          description: Webpush keys
          required:
            - p256dh
            - auth
          properties:
            p256dh:
              type: string
              description: Webpush p256dh key
            auth:
              type: string
              description: Webpush auth key
      required:
        - endpoint
        - keys

    SensorInfoCamera:
      type: object
      properties:
        feed_uri:
          type: string
      required:
        - feed_uri

    SensorInfoHumidity:
      type: object
      properties:
        humidity:
          type: number
          example: 23.4
      required:
        - humidity

    SensorInfoTemperature:
      type: object
      properties:
        temperature:
          type: number
          example: 23.4
      required:
        - temperature
      
    SensorInfoIAQ:
      type: object
      properties:
        iaq:
          type: number
          example: 23.4
      required:
        - iaq

    SensorInfo:
      allOf:
        - $ref: "#/components/schemas/SensorData"
        - required:
            - label
          properties:
            label:
              type: string
              example: living room cam 1
              description: A human readable label for the sensor

    SensorData:
      required:
        - id
        - kind
        - data
      discriminator:
        propertyName: kind
      properties:
        kind:
          type: string
          enum: [camera, humidity, temperature, iaq]
          description: The kind of sensor
        data:
          description: The sensor data
          oneOf:
            - $ref: "#/components/schemas/SensorInfoHumidity"
            - $ref: "#/components/schemas/SensorInfoTemperature"
            - $ref: "#/components/schemas/SensorInfoCamera"
            - $ref: "#/components/schemas/SensorInfoIAQ"
        id:
          type: string
  
    AlertHistoryEntry:
      required:
        - id
        - sensor_id
        - kind
        - value
        - created_at
      properties:
        id:
          type: string
          x-go-type:
            type: ULID
            import: github.com/oklog/ulid
        sensor_id:
          type: string
        kind:
          type: string
        value:
          type: string
        created_at:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    apiKey:
      type: apiKey
      in: query
      name: api-key
security:
  # grep -oP 'Permission\s*=\s*"(.*)"' api/session/perms.go | awk '{print "- " $3}' | uniq
  - bearerAuth:
      - "perm"
      - "perm:users:create"
      - "perm:users:read"
      - "perm:users:delete"
      - "perm:alerts:read"
      - "perm:sensors:read"
      - "perm:sensors:update"
      - "perm:sensors:delete"
      - "perm:sensors:state:update"
